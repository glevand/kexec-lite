## configure.ac -- Process this file with autoconf to produce configure
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

AC_INIT([kexec-lite], [@version@], [Anton Blanchard <anton@samba.org>])

AM_INIT_AUTOMAKE

AC_CONFIG_MACRO_DIR([m4])

AC_PREFIX_DEFAULT([/usr/local])

AS_IF([test "x$CFLAGS" = "x"], [AC_SUBST([CFLAGS], [""])])

AM_PROG_AS
AC_PROG_CC
AC_PROG_INSTALL

AC_GNU_SOURCE
LT_INIT

AC_CHECK_HEADERS([stdarg.h])
AC_CHECK_HEADERS([varargs.h])

AC_CHECK_LIB([elf], [elf_version],
	[],
	[AC_MSG_FAILURE([The libelf development libraries and header files are required by kexec-lite.  Try installing the libelf development package.])]
)

AC_CHECK_LIB([fdt], [fdt_open_into],
	[],
	[AC_MSG_FAILURE([The libfdt development libraries and header files are required by kexec-lite.  Try installing the libfdt development package.])]
)

AC_CHECK_HEADERS([libfdt.h])
AC_CHECK_DECL([fdt_setprop_u64],
	[AC_DEFINE(HAVE_FDT_SETPROP_U64,1,[Whether fdt_setprop_u64() is available])],
	[AC_MSG_WARN([A newer version of the libfdt development libraries and header files is suggested by kexec-lite.  Try upgrading the libfdt development package.])],
	[[#include <libfdt.h>]]
)

dnl Checking for va_copy availability
AC_MSG_CHECKING([for va_copy])
AC_TRY_LINK([#include <stdarg.h>
va_list ap1,ap2;], [va_copy(ap1,ap2);],
have_va_copy=yes,
have_va_copy=no)
AC_MSG_RESULT($have_va_copy)
if test x"$have_va_copy" = x"yes"; then
    AC_DEFINE(HAVE_VA_COPY,1,[Whether va_copy() is available])
else
    AC_MSG_CHECKING([for __va_copy])
    AC_TRY_LINK([#include <stdarg.h>
    va_list ap1,ap2;], [__va_copy(ap1,ap2);],
    have___va_copy=yes,
    have___va_copy=no)
    AC_MSG_RESULT($have___va_copy)
    if test x"$have___va_copy" = x"yes"; then
        AC_DEFINE(HAVE___VA_COPY,1,[Whether __va_copy() is available])
    fi
fi

AC_ARG_ENABLE(
	[debug],
	[AS_HELP_STRING([--enable-debug],
		[build programs with extra debug info [default=no]]
	)],
	[],
	[enable_debug=check]
)
#AM_CONDITIONAL([ENABLE_DEBUG], [test "x$enable_debug" = "xyes"])

AC_ARG_ENABLE(
	[test-valgrind],
	[AS_HELP_STRING([--enable-test-valgrind],
		[run all tests with valgrind]
	)],
)
AM_CONDITIONAL([ENABLE_TEST_VALGRIND], [test "x$enable_test_valgrind" = "xyes"])

default_cflags="--std=gnu99 -g -ggdb3 \
	-Wall -W -Wunused -Wstrict-prototypes -Wmissing-prototypes \
	-Wmissing-declarations -Wredundant-decls"

AC_ARG_ENABLE(
	[werror],
	[AS_HELP_STRING([--enable-werror],
		[build programs with -Werror]
	)],
	[default_cflags="$default_cflags -Werror"]
)

AS_IF(
	[test "x$enable_debug" = "xyes"],
	[AC_SUBST([DEFAULT_CFLAGS], ["$default_cflags -O0 -DDEBUG"])],
	[AC_SUBST([DEFAULT_CFLAGS], ["$default_cflags -O2 -DNDEBUG"])]
)
 

AC_SUBST([LIBTOOL_DEPS])
AC_SUBST([DESTDIR])
AC_SUBST([pkgsysconfdir], ["${sysconfdir}/${package}"])

case $host in
aarch64*-*-*)
	ARCH_PATH=arch/arm64
	;;
powerpc*-*-*)
	ARCH_PATH=arch/powerpc64
	;;
*-*-*)
	AC_MSG_FAILURE([Unsupported kexec-lite host architecture '$host'.])
	;;
esac
AC_SUBST([ARCH_PATH])

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
	Makefile
	arch/arm64/Makefile
	arch/powerpc64/Makefile
])

AC_OUTPUT
